buildscript {
  ext.kotlin_version = '1.2.50-eap-86'
  repositories {
    maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.github.shyiko:ktlint:0.23.1"
  }
}

plugins {
  id "com.gradle.build-scan" version "1.13.4"
  id 'com.github.ben-manes.versions' version '0.17.0'
  id 'net.nemerosa.versioning' version '2.7.0'
  id 'io.codearte.nexus-staging' version '0.11.0'
  id "org.jlleitschuh.gradle.ktlint" version "4.0.0"
}

ext.jacksonVersion = '2.9.5'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'com.baulsupp'
archivesBaseName = "oksocial-output"

versioning {
  // TODO automate this
  releaseMode = project.hasProperty('releaseMode') ? project.property('releaseMode') : 'snapshot'
}

version = versioning.info.display

description = "OkHttp Social Output"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

compileKotlin {
  kotlinOptions.jvmTarget = "1.8"
  kotlinOptions.apiVersion = "1.2"
  kotlinOptions.languageVersion = "1.2"
}

compileTestKotlin {
  kotlinOptions.jvmTarget = "1.8"
  kotlinOptions.apiVersion = "1.2"
  kotlinOptions.languageVersion = "1.2"
}

repositories {
  jcenter()
  maven { url "https://jitpack.io" }
  maven { url "http://repo.maven.apache.org/maven2" }
  maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.0'
  implementation "org.jfree:jfreesvg:3.3"
  implementation 'com.kitfox.svg:svg-salamander:1.0'
  implementation 'org.zeroturnaround:zt-exec:1.10'
  implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
  implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
  implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
  implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion"
  implementation 'org.slf4j:slf4j-api:1.8.0-beta2'
  implementation 'com.jakewharton.byteunits:byteunits:0.9.1'

  compile 'com.squareup.okio:okio:1.14.1'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
  testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

  testRuntime 'org.slf4j:slf4j-jdk14:1.8.0-beta2'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

//packaging tests
task packageTests(type: Jar) {
  from sourceSets.test.output
  classifier = 'tests'
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar, packageTests, jar
}

// TODO support publish to maven local

if (project.hasProperty('ossrhUser')) {
  signing {
    sign configurations.archives
  }

  nexusStaging {
    username = ossrhUser
    password = ossrhPassword
//  packageGroup = "org.mycompany.myproject" //optional if packageGroup == project.getGroup()
//  stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using "packageGroup"
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUser, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUser, password: ossrhPassword)
        }

        pom.project {
          name project.name
          group 'com.baulsupp'
          description "Command Line Output Library"
          url "https://github.com/yschimke/oksocial-output"

          scm {
            connection 'scm:git:https://github.com/yschimke/oksocial-output.git'
            developerConnection 'scm:git:git@github.com:yschimke/oksocial-output.git'
            url 'https://github.com/yschimke/oksocial-output.git'
          }

          licenses {
            license {
              name 'Apache License'
              url 'http://opensource.org/licenses/apache-2.0'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id = 'yschimke'
              name = 'Yuri Schimke'
              email = 'yuri@schimke.ee'
            }
          }

          packaging 'jar'
        }
      }
    }
  }
}

buildScan { licenseAgreementUrl = 'https://gradle.com/terms-of-service'; licenseAgree = 'yes' }

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = (selection.candidate.group == "io.netty" && selection.candidate.version ==~ /5\..*/) || (selection.candidate.group == "org.jetbrains.kotlin" && selection.candidate.version ==~ /.*dev.*/)
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

test {
  useJUnitPlatform {
    excludeTags 'slow'
    includeEngines 'junit-jupiter', 'junit-vintage'
  }

  failFast = true
}

kotlin {
  experimental {
    coroutines "enable"
  }
}
